#!/opt/bin/perl

use strict;
use warnings;
use utf8;
use JSON::XS qw/decode_json/;

=pod

=head1 bootstrap

AWS Lambda Layer runtime for Perl

https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html?shortFooter=true

=cut

my $task_root;
BEGIN {
    $task_root = $ENV{'LAMBDA_TASK_ROOT'};
}

use lib (
  "/opt/bundle/lib",
  "/opt/local/lib/perl5", # for additional package layers
  "${task_root}/local/lib/perl5" # for vendoring
); 

use Lambda::Runtime::API;
use Lambda::Runtime::Context;

=head2 runtime

Main function for bootstrap.

Initialize the API, and load the function.

If there is an error starting up, post an initialization error,
otherwise run the event loop

=cut

sub runtime {
  my $aws_lambda_runtime_api = $ENV{'AWS_LAMBDA_RUNTIME_API'} // die '$AWS_LAMBDA_RUNTIME_API is not found';
  my $api = Lambda::Runtime::API->new($aws_lambda_runtime_api);

  my $func;
  eval { $func = load_function(); };
  if ($@) {
    $api->initialization_error('FunctionLoadFailed', $@);
  } else {
    event_loop($api, $func);
  }
}

=head2 load_function

Parse the _HANDLE environment variable and load function handler

Return a reference to the function

=cut
sub load_function {
  my ($handler, $func) = split(/[.]/, $ENV{'_HANDLER'}, 2);
  require "${task_root}/${handler}.pl";
  my $f = \&$func;
  return $f;
}

=head2 event_loop

Start an infinite loop that requests the next event
When an event is received, pass it and the function to the event handler

If the handler returns an error, post an invocation error to the API
Otherwise post the response context to the API

=cut

sub event_loop {
  my ($api, $func) = @_;
  while (1) {
    my $next_event = $api->next();
    my $request_id = $next_event->{headers}->{'lambda-runtime-aws-request-id'};
    unless ($request_id) {
      die 'cannot take the Lambda request ID';
    }
    $ENV{'_X_AMZN_TRACE_ID'} = $next_event->{headers}->{'lambda-runtime-trace-id'};

    my $result;
    eval {
      $result = handle_event($next_event, $func);
    };
    if ($@) {
      $api->invocation_error($request_id, 'FunctionExecutionFailed', $@);
    } else {
      $api->respond($request_id, $result);
    }
  }
}

=head2 handle_event

Initialize a Lambda::Function::Context instance from the headers,
and decode the event content.

Execute the function with the payload and context and return the response

=cut

sub handle_event {
  my ($event, $func) = @_;

  my $context = Lambda::Runtime::Context->new($event->{headers});
  my $payload = decode_json($event->{content});

  return $func->($payload, $context);
}

runtime();

__END__
